Stack structure
---------------

- main calls user_code like it's a C function.

- user_code should first create a stack frame for itself! (The same way we create it for a function.)


- spill space
- space for locals, incl function context function context << contains a descriptor of the stack frame
- caller save registers, incl ebp
- return address << will be pushed by the call instruction
- params
- callee save registers

The first local is the function context??


When entering user_code, the stack is:

return address

user_code prologue:

spill space for user_code
function context pointer
0xc0decafe
saved ebp << ebp
return address

When user_code calls a builtin:

params << let's pass ebp as a param??
caller saved registers
spill space for user_code
function context ptr
0xc0decafe
saved ebp << ebp
return address

When user_code calls a user function (caller):

function context << needs to be popped
caller saved registers
spill space for user_code
function context ptr
0xc0decafe
saved ebp << ebp
return address

When user_code calls a user function (callee):

function context ptr
0xc0decafe
saved ebp << ebp
caller saved registers
spill space for user_code
function context ptr
0xc0decafe
older saved ebp << saved ebp
return address
